Styles and theme (topic)
--------------------------

Styles are used to save "styles" so it can be easily
used in components

example

they reside in res/values directory

You can define multiple styles per file using <style> 
tag but each style will have its name that uniquely 
identifies the style


<?xml version="1.0" encoding="utf-8"?>
<resources>
   <style name="CustomFontStyle">
      <item name="android:layout_width">fill_parent</item>
      <item name="android:layout_height">wrap_content</item>
      <item name="android:capitalize">characters</item>
      <item name="android:typeface">monospace</item>
      <item name="android:textSize">12pt</item>
      <item name="android:textColor">#00FF00</item>/> 
   </style>
</resources>


Then to use the style

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
   android:layout_width="fill_parent"
   android:layout_height="fill_parent"
   android:orientation="vertical" >

   <TextView
      android:id="@+id/text_id"
      style="@style/CustomFontStyle"
      android:text="@string/hello_world" />

</LinearLayout>


Theme
------

A theme is nothing but an Android style applied to an entire Activity 
or application, rather than an individual View.

To set a theme for all the activities of your application, open the 
AndroidManifest.xml file and edit the <application> tag to include the 
android:theme attribute with the style name. For example −

<application android:theme="@style/CustomFontStyle">

But if you want a theme applied to just one Activity in your application, 
then add the android:theme attribute to the <activity> tag only. For example −

<activity android:theme="@style/CustomFontStyle">

view image resources/them5.jpg


Styles and themes are meant to work together. For example, you might 
have a style that specifies that one part of a button is colorPrimary, 
and another part is colorSecondary. The actual definitions of those 
colors are provided in the theme. When the device goes into night mode, 
your app can switch from its "light" theme to its "dark" theme, 
changing the values for all those resource names. You don't need to 
change the styles, since the styles are using the semantic names 
and not specific color definitions.


Extend and customize a style
-----------------------------

When creating your own styles, always extend an existing style from 
the framework or Support Library so that you maintain compatibility 
with platform UI styles. To extend a style, specify the style you want 
to extend with the parent attribute.

<style name="GreenText" parent="@android:style/TextAppearance">
    <item name="android:textColor">#00FF00</item>
</style>

However, always inherit your core app styles from the Android Support 
Library. The styles in the Support Library provide compatibility by 
optimizing each style for the UI attributes available in each version. 
The Support Library styles often have a name similar to the style from 
the platform, but with AppCompat included.

To inherit styles from a library or your own project, declare the 
parent style name without the @android:style/ part shown in the 
preceding example. For example, the following example inherits 
text appearance styles from the Support Library:


<style name="GreenText" parent="TextAppearance.AppCompat">
    <item name="android:textColor">#00FF00</item>
</style>

Style hierarchy
----------------
Applying character- or paragraph-level styling using text spans to TextView-derived classes.
Applying attributes programmatically.
Applying individual attributes directly to a view.
Applying a style to a view.
Default styling.
Applying a theme to a collection of views, an activity, or your entire app.
Applying certain view-specific styling, such as setting a TextAppearance on a TextView.



sources:

https://www.tutorialspoint.com/android/android_styles_and_themes.htm



----------------
Appendix
---------------

Hiding Status Bar
------------------
Approaches

1. xml
2. Activity

1. replace <style name="Theme.Android_play_ground" parent="Theme.MaterialComponents.DayNight.DarkActionBar">

with <style name="Theme.Android_play_ground" parent="Theme.MaterialComponents.DayNight.NoActionBar">

// Hide the status bar.
window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_FULLSCREEN
// Remember that you should never show the action bar if the
// status bar is hidden, so hide that too if necessary.
actionBar?.hide()

Note!!
The method setSystemUiVisibility() only has an effect if the view you call it from is visible.
Navigating away from the view causes flags set with setSystemUiVisibility() to be cleared.

source: 
https://developer.android.com/training/system-ui/status

------------------
Show Toast
------------------
Toast.makeText(this,"text",Toast.LENGTH_SHORT).show()

-------------------
Fomating a string
--------------------
String.format("%.2f",bmi);
